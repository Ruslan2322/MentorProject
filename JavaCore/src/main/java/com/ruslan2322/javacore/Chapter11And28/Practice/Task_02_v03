package main.java.com.ruslan2322.javacore.multithreading.Practice.Task_02.Task_02_v2.Lock;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Задание 2
 * <p>
 * Необходимо написать программу, которая выводит строковое представление числа от 1 до N.
 * Если число делится без остатка на 3, представление "fizz".
 * Если число делится без остатка на 5, представление "buzz".
 * Если число делится без остатка и на 3, и на 5, представление "fizzbuzz".
 * Пример, для  n = 15,вывод будет: 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz.
 * Имеется код
 * class FizzBuzz {
 * public FizzBuzz(int n) { ... }
 * public void fizz(printFizz) { ... }
 * public void buzz(printBuzz) { ... }
 * public void fizzbuzz(printFizzBuzz) { ... }
 * public void number(printNumber) { ... }
 * }
 * Необходимо реализовать многопоточную версию данного класса для 4-х потоков. Один и тот же экземпляр будет передаваться в разные потоки.
 * Поток A вызывает fizz() для проверки деления без остатка на 3 и выводит fizz.
 * Поток B вызывает buzz() для проверки деления без остатка на 5 и выводит buzz.
 * Поток C вызывает fizzbuzz() для проверки деления без остатка на 3 и на 5 и выводит fizzbuzz.
 * Поток D вызывает number() который выводит только числа.
 */


class MyThread extends Thread {
    FizzBuzz fizzBuzz;   // передадим экземпляр FizzBuzz в этот класс
    Lock lock;

    public MyThread(String name, FizzBuzz fizzBuzz){
        super(name);
        this.fizzBuzz = fizzBuzz;
        this.lock = new ReentrantLock();
    }

    @Override
    public  void run() {

        int three = 3;   // добавим 3 переменных для класса  ThreadGenerator и используем их ниже в цикле
        int five = 5;
        int fifteen = 15;

        try {
            if (lock.tryLock()) { // добавляем блокировку

                for (int i = 1; i < fizzBuzz.getN(); i++) {

                    if (i % 3 != 0 && i % 5 != 0 && i % 15 != 0) {    // если не подпадает под наши делители , то передаём текущее значение на новый поток
                        ThreadGenerator d = new ThreadGenerator("D", fizzBuzz, i);   // так же передаём обект класса FizzBuzz
                        d.start();
                        Thread.sleep(200);  // выставлены разные задержки, что бы показать, что потоки синхронизированы
                        d.interrupt();            // если честно то я не понял  нужен ли этот метод тут на самом деле и без него вроде работает
                        continue;

                    }
                    if (i % 3 == 0 && i % 5 == 0) {
                        ThreadGenerator a = new ThreadGenerator("A", fizzBuzz, fifteen); // если делится на 5 и на 3 , создаём поток поток и передаём на него экземпляр FizzBuzz
                        a.start();
                        Thread.sleep(1200);
                        a.interrupt();
                        continue;
                    }
                    if (i % 3 == 0) {
                        ThreadGenerator b = new ThreadGenerator("B", fizzBuzz, three); // если делится 3 , создаём поток поток и передаём на него экземпляр FizzBuzz
                        b.start();
                        Thread.sleep(600);
                        b.interrupt();
                        continue;
                    }
                    if (i % 5 == 0) {
                        ThreadGenerator c = new ThreadGenerator("C", fizzBuzz, five); // если делится на 5  , создаём поток поток и передаём на него экземпляр FizzBuzz
                        c.start();
                        Thread.sleep(2000);
                        c.interrupt();
                        continue;
                    }
                }
            }
        } catch (InterruptedException exc) {
            System.out.println(exc);
        }
    }
}

class ThreadGenerator extends Thread{

    Lock lock;

    FizzBuzz fizzBuzz; // добавим экземпляр класса FizzBuzz
    int number;

    ThreadGenerator(String name, FizzBuzz fizzBuzz, int number){
        super(name);
        this.fizzBuzz = fizzBuzz;
        this.number = number;
        lock = new ReentrantLock();
    };

    public  int getNumber(){ // создадим геттер для работы с принятым значением number
        return number;
    }

    public   void run(){   // я так понял во всем коде достаточно синхронизировать только этот метод?

       lock.lock();// добавляем блокировку
        try {


                switch (getNumber()) {
                    case 15:     // случай деления на 3 и 5
                        Thread.sleep(200);
                        fizzBuzz.fizzbuzz();
                        break;
                    case 3:      // случай деления на 3
                        Thread.sleep(200);
                        fizzBuzz.fizz();
                        break;
                    case 5:      // случай деления на 5
                        Thread.sleep(200);
                        fizzBuzz.buzz();
                        break;
                    default:     // если не один из делителей не подошел
                        fizzBuzz.number(getNumber());

                        // ВОПРОС !! Как мне заменить последнюю запятую на выводе на точку?
                        // У меня возникло решение в голове через дополнительную строку с еденицей и вычитанием еденицы из
                        // getN() , но мне сразу показалось это колхозом
                }

        }
        catch(InterruptedException e){
            System.out.println("Thread has been interrupted");
        }
    }
}
//            if (getNumber() == 15) {          // запасная схема для метода run()
//                Thread.sleep(200);
//                fizzBuzz.fizzbuzz();
//            }
//            if (getNumber() == 3) {
//                Thread.sleep(200);
//                fizzBuzz.fizz();
//            }
//            if (getNumber() == 5) {
//                Thread.sleep(200);
//                fizzBuzz.buzz();
//            }
//            if (getNumber() % 3 != 0 && getNumber() % 5 != 0 && getNumber() % 15 != 0 ){
//                fizzBuzz.number(getNumber());
//            }


public class FizzBuzz{  // Главный класс по заданию

    int n;   // очевидно, что значение n будем передавать через конструктор

    public FizzBuzz(int n) {
        this.n = n;
    }

    public  int getN(){  // добавим геттер для использования в методе run() класса MyThread
        return n;
    }

    public  static void fizz() {  // методы по заданию
        System.out.print("Fizz,");
    }

    public  void buzz() {         // - // -
        System.out.print("Buzz,");
    }

    public  void fizzbuzz() {  // - // -
        System.out.print("FizzBuzz,");
    }

    public  void number(int printNumber) {  // - // -
        System.out.print(printNumber + ",");

    }
}

class Main {
        public static void main(String[] args) {

            int N = 19;

            FizzBuzz fizzBuzz = new FizzBuzz(N);   // создаём экземпляр класса и вводим число N

           MyThread myThread = new MyThread("Java", fizzBuzz); // создаём вспомогательный поток

           myThread.run(); // запуск

        }
    }


